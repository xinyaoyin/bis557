}
m
m <- model.matrix(formula,data)
ridge_train
m <- model.matrix(y ~. - 1,ridge_train)
m <- model.matrix(y ~. - 1,ridge_train)
svd_obj <- svd(m)
r<- 1/(svd_obj$d)
r
svd_obj$d
m <- model.matrix(y ~. - 1,ridge_train)
svd_obj <- svd(m)
r<- 1/(svd_obj$d)
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
beta <- V%*% D %*% t(U) %*% y
m <- model.matrix(y ~. - 1,ridge_train)
svd_obj <- svd(m)
r<- 1/(svd_obj$d)
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
beta <- V%*% D %*% t(U) %*% y
m <- model.matrix(y ~. - 1,ridge_train)
svd_obj <- svd(m)
r<- 1/(svd_obj$d)
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
D
1/D
ridge_reg <- function(form, lambda, d){
rownames(d) <- NULL
m <- model.matrix(form,d)
y <- matrix(d[,as.character(form)[2]], ncol=1)
y<- y[as.numeric(rownames(m)),, drop = FALSE]
#Fit directly
# beta <- solve (t(m) %*% m + lambda * diag(rep(1,ncol(m)))) %*% t(m) %*%y
# or via svd
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
beta <- V%*% D %*% t(U) %*% y
rownames(beta)<- colnames(m)
ret <- list(coefficients = beta, lambda = lambda, form = form)
class(ret) <- "ridge_reg"
ret
}
# dispatch
predict.ridge_reg <- function(object, ...)
{
newdata <- list(...)[[1]] #give the first object
#args <- as.list(match.call())
#newdata <- eval(args [[3]])
m <- model.matrix(object$form, newdata)
m %*% object$coefficients
}
install.packages("MASS")
library(MASS)
library(faraway)
data(pima)
####
form <- glucose ~ triceps + insulin + bmi
ridge_fit <- ridge_reg(form, 1.2, pima)
predict(ridge_fit, pima)
test_ind <- sample.int(nrow(pima),50)
train_ind <- setdiff(1:nrow(pima), test_ind)
library(foreach)
library(doParallel)
lambda_seq <- seq(0, 10, by = 0.1)
cl <- makeCluster(4)
install.packages("MASS")
registerDoParallel(cl)
system.time({
mse <- foreach(lambda = lambda_seq, .combine = c, .export = c("predict.ridge_reg")) %dopar% {
fit <- ridge_reg(form, lambda , pima[train_ind,])
error <- pima$glucose[test_ind] - predict(fit, pima[test_ind,])
mean(error^2)
}})
plot(mse)
#######
fit <- ridge_reg(form, 1, pima[train_ind,])
error <- pima$glucose[test_ind] - predict(fit, pima[test_ind,])
mean(error^2)
# see where you have error
options(error = recover)
fit <- lm.ridge()
predict(fit, pima)
fit <- lm(form, data = pima)
plot(mse)
x <- as.matrix(model.matrix(y ~.,ridge_train))
svd_obj <- svd(x)
lambda.range <- range(svd_obj[["d"]])^2
lambda.range
lambda <- seq(0,lambda.range[2], 0.5)
lambda
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
fit
library(bis557)
data(ridge_train)
data(ridge_test)
data("ridge_train")
data("ridge_test")
library(bis557)
ridge_train
data(ridge_train)
data(ridge_test)
ridge_train
ridge_test
data("iris")
data("ridge_train")
knitr::opts_chunk$set(echo = TRUE)
# read in datasets
ridge_train <- read.csv("ridge_test.csv")
#
setwd("/Users/graceyin/Desktop/bis557/data-raw")
# read in datasets
ridge_train <- read.csv("ridge_test.csv")
ridge_test <- read.csv("ridge_train.csv")
# save datasets to data folder
save(ridge_train, file = "../data/ridge_train.rda")
save(ridge_test, file = "../data/ridge_test.rda")
library(bis557)
data("ridge_train")
m <-model.matrix(y ~.,ridge_train)
svd_obj <- svd(x)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
l_range <- range(svd_obj[["d"]])^2
l
l_range
svd_obj
l_range <- range(svals)^2
l_range
range(svals)
D <- diag(svals / (svals^2 + lambda))
D
range(D)
range(1/D)
predict.ridge_reg <- function(object, ...){
newdata <- list(...)[[1]]
m <- model.matrix(object$form,newdata)
m %*% object$coefficients
}
lambda_fit <- seq(0, 650, by=1)
mse = rep(NA, length(lambda_fit))
for (i in 1:length(lambda_fit)){
fit <- ridge_reg(y~., lambda_fit[i], ridge_train)
error <- ridge_test$y - predict(fit, ridge_test)
mse[i] <- mean(error^2)
}
plot(mse~log(lambda_fit), xlab = "log(lambda)", ylab = "out-of-sample mean squared error values", type = "l")
lambda_fit[which(mse == min(mse))]
form <- y ~ . - 1
form
form <- y~.
fit <- ridge_reg(form, lambda , ridge_train)
fit <- ridge_reg(form, lambda_fit, ridge_train)
library(foreach)
library(doParallel)
fit <- ridge_reg(form, lambda_fit, ridge_train)
mse <- foreach(lambda = lambda_seq, .combine = c, .export = c("predict.ridge_reg")) %dopar% {
fit <- ridge_reg(form, lambda , pima[train_ind,])
error <- pima$glucose[test_ind] - predict(fit, pima[test_ind,])
mean(error^2)
}
ridge_reg <- function(formula, lambda, data){
rownames(data) <- NULL
m <- model.matrix(formula,data)
y <- matrix(data[,as.character(formula)[2]], ncol=1)
y<- y[as.numeric(rownames(m)),, drop = FALSE]
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
beta <- V%*% D %*% t(U) %*% y
rownames(beta)<- colnames(m)
ret <- list(coefficients = beta, lambda = lambda, form = formula)
class(ret) <- "ridge_reg"
ret
}
mse <- foreach(lambda = lambda_fit, .combine = c, .export = c("predict.ridge_reg")) %dopar% {
fit <- ridge_reg(y~., lambda, ridge_train)
error <- ridge_test$y - predict(fit, ridge_test)
mean(error^2)
}
#plot mse with log(lambda) values, here we use log(lambda)
plot(mse~log(lambda_fit), xlab = "log(lambda)", ylab = "out-of-sample mean squared error values", type = "l")
lambda_fit[which(mse == min(mse))]
# Predict values of ridge regression
# This is according to what we learnt in class
predict.ridge_reg <- function(object, ...){
newdata <- list(...)[[1]]
m <- model.matrix(object$form,newdata)
m %*% object$coefficients
}
# Find the relationship between log(lambda) and mse
lambda_fit <- seq(0.1, 200, by=0.1)
mse = rep(NA, length(lambda_fit))
for (i in 1:length(lambda_fit)){
fit <- ridge_reg(y~., lambda_fit[i], ridge_train)
error <- ridge_test$y - predict(fit, ridge_test)
mse[i] <- mean(error^2)
}
#plot mse with log(lambda) values, here we use log(lambda)
plot(mse~log(lambda_fit), xlab = "log(lambda)", ylab = "out-of-sample mean squared error values", type = "l")
#find the lambda value which minimizes out-of-sample mse
lambda_fit[which(mse == min(mse))]
view(ridge_train)
views(ridge_train)
ridge_train
setwd("/Users/graceyin/Desktop/bis557/data-raw")
# read in datasets
ridge_train <- read.csv("ridge_train.csv")
ridge_test <- read.csv("ridge_test.csv")
# save datasets to data folder
save(ridge_train, file = "../data/ridge_train.rda")
save(ridge_test, file = "../data/ridge_test.rda")
setwd("/Users/graceyin/Desktop/bis557/data-raw")
# read in datasets
ridge_train <- read.csv("ridge_train.csv")
ridge_test <- read.csv("ridge_test.csv")
# save datasets to data folder
save(ridge_train, file = "../data/ridge_train.rda")
save(ridge_test, file = "../data/ridge_test.rda")
setwd("/Users/graceyin/Desktop/bis557/data-raw")
ridge_train <- read.csv("ridge_train.csv")
setwd("~/Desktop/bis557/data-raw")
setwd("~/Desktop/bis557/data-raw")
# read in datasets
ridge_train <- read.csv("ridge_train.csv")
ridge_test <- read.csv("ridge_test.csv")
# save datasets to data folder
save(ridge_train, file = "../data/ridge_train.rda")
save(ridge_test, file = "../data/ridge_test.rda")
ridge_train
# Predict values of ridge regression
# This is according to what we learnt in class
predict.ridge_reg <- function(object, ...){
newdata <- list(...)[[1]]
m <- model.matrix(object$form,newdata)
m %*% object$coefficients
}
# Find the relationship between log(lambda) and mse
lambda_fit <- seq(0, 650, by=1)
form <- y~.
mse <- foreach(lambda = lambda_fit, .combine = c, .export = c("predict.ridge_reg")) %dopar% {
fit <- ridge_reg(y~., lambda, ridge_train)
error <- ridge_test$y - predict(fit, ridge_test)
mean(error^2)
}
#plot mse with log(lambda) values, here we use log(lambda)
plot(mse~log(lambda_fit), xlab = "log(lambda)", ylab = "out-of-sample mean squared error values", type = "l")
#find the lambda value which minimizes out-of-sample mse
lambda_fit[which(mse == min(mse))]
# Predict values of ridge regression
# This is according to what we learnt in class
predict.ridge_reg <- function(object, ...){
newdata <- list(...)[[1]]
m <- model.matrix(object$form,newdata)
m %*% object$coefficients
}
# Find the relationship between log(lambda) and mse
lambda_fit <- seq(0, 650, by=0.1)
form <- y~.
mse <- foreach(lambda = lambda_fit, .combine = c, .export = c("predict.ridge_reg")) %dopar% {
fit <- ridge_reg(y~., lambda, ridge_train)
error <- ridge_test$y - predict(fit, ridge_test)
mean(error^2)
}
#plot mse with log(lambda) values, here we use log(lambda)
plot(mse~log(lambda_fit), xlab = "log(lambda)", ylab = "out-of-sample mean squared error values", type = "l")
#find the lambda value which minimizes out-of-sample mse
lambda_fit[which(mse == min(mse))]
fit
library(foreach)
library(doParallel)
# get the predicted values using ridge regression
# (function reference to class notes)
predict.ridge_reg <- function(object, ...){
newdata <- list(...)[[1]]
m <- model.matrix(object$form,newdata)
m %*% object$coefficients
}
# set lambda values
l_lambda <- seq(0, 650, by=0.1)
# calculate MSE (reference to class notes)
mse <- foreach(lambda = l_lambda, .combine = c, .export = c("predict.ridge_reg")) %dopar% {
fit <- ridge_reg(y~., lambda, ridge_train)
error <- ridge_test$y - predict(fit, ridge_test)
mean(error^2)
}
# plot MSE against log(lambda)
plot(mse~log(l_lambda), xlab = "log(lambda)", ylab = "out-of-sample MSE", type = "l")
# find the lambda value that minimizes the out-of-sample MSE
l_lambda[which(mse == min(mse))]
# plot MSE against log(lambda)
plot(mse~log(l_lambda), xlab = "log(lambda)", ylab = "out-of-sample MSE", title = "Out-of-sample mean square error vs. lambda", type = "l")
# plot MSE against log(lambda)
plot(mse~log(l_lambda), xlab = "log(lambda)", ylab = "out-of-sample MSE", main = "Out-of-sample mean square error vs. lambda", type = "l")
# plot MSE against log(lambda)
plot(mse~log(l_lambda), xlab = "log(lambda)", ylab = "out-of-sample MSE", main = "Out-of-sample mean square error vs. log(lambda)", type = "l")
# find the lambda value that minimizes the out-of-sample MSE
l_lambda[which(mse == min(mse))]
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
fit
library(bis557)
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
library(bis557)
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
ridge_reg <- function(formula, lambda, data){
rownames(data) <- NULL
m <- model.matrix(formula,data)
y <- matrix(data[,as.character(formula)[2]], ncol=1)
y<- y[as.numeric(rownames(m)),, drop = FALSE]
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
beta <- V%*% D %*% t(U) %*% y
rownames(beta)<- colnames(m)
ret <- list(coefficients = beta, lambda = lambda, form = formula)
class(ret) <- "ridge_reg"
ret
}
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
fit
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
fit
data("ridge_train")
data("ridge_test")
library(bis557)
fit <- linear_model(Sepal.Length ~ ., iris)
summary(fit)
library(bis557)
fit <- linear_model(Sepal.Length ~ ., iris)
summary(fit)
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
fit
library(bis557)
fit <- linear_model(Sepal.Length ~ ., iris)
summary(fit)
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
install.packages("bis557")
install.packages("bis557")
library(bis557)
fit <- linear_model(Sepal.Length ~ ., iris)
summary(fit)
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
library(bis557)
ridge_reg <- function(formula, lambda, data){
rownames(data) <- NULL
m <- model.matrix(formula,data)
y <- matrix(data[,as.character(formula)[2]], ncol=1)
y<- y[as.numeric(rownames(m)),, drop = FALSE]
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
beta <- V%*% D %*% t(U) %*% y
rownames(beta)<- colnames(m)
ret <- list(coefficients = beta, lambda = lambda, form = formula)
class(ret) <- "ridge_reg"
ret
}
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
fit
data("ridge_train")
data("ridge_test")
check()
check()
check()
install.packages("MASS")
install.packages("MASS")
library(MASS)
check()
check()
check()
install.packages("foreach")
install.packages("doParallel")
library(MASS)
library(foreach)
library(doParallel)
data("ridge_train")
data("ridge_test")
install.packages("doParallel")
install.packages("foreach")
install.packages("foreach")
check()
ridge_reg <- function(formula, lambda, data){
rownames(data) <- NULL
m <- model.matrix(formula,data)
y <- matrix(data[,as.character(formula)[2]], ncol=1)
y<- y[as.numeric(rownames(m)),, drop = FALSE]
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
beta <- V%*% D %*% t(U) %*% y
rownames(beta)<- colnames(m)
ret <- list(coefficients = beta, lambda = lambda, form = formula)
class(ret) <- "ridge_reg"
ret
}
library(bis557)
fit <- ridge_reg(Sepal.Length ~ .,1.2121, iris)
fit
# use svd to calculate singular values
m <-model.matrix(y ~.,ridge_train)
data("ridge_train")
data("ridge_test")
# use svd to calculate singular values
m <-model.matrix(y ~.,ridge_train)
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
# get the range of reasonable lambda values
l_range <- range(svals)^2
# get the predicted values using ridge regression
# (function reference to class notes)
predict.ridge_reg <- function(object, ...){
newdata <- list(...)[[1]]
m <- model.matrix(object$form,newdata)
m %*% object$coefficients
}
# set lambda values
l_lambda <- seq(0, 650, by=0.1)
# calculate MSE (reference to class notes)
mse <- foreach(lambda = l_lambda, .combine = c, .export = c("predict.ridge_reg")) %dopar% {
fit <- ridge_reg(y~., lambda, ridge_train)
error <- ridge_test$y - predict(fit, ridge_test)
mean(error^2)
}
# plot MSE against log(lambda)
plot(mse~log(l_lambda), xlab = "log(lambda)", ylab = "out-of-sample MSE", main = "Out-of-sample mean square error vs. log(lambda)", type = "l")
# find the lambda value that minimizes the out-of-sample MSE
l_lambda[which(mse == min(mse))]
check()
check()
check()
check()
data("ridge_train")
data("ridge_train")
data("ridge_test")
# use svd to calculate singular values
m <-model.matrix(y ~.,ridge_train)
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
# get the range of reasonable lambda values
l_range <- range(svals)^2
# use svd to calculate singular values
m <-model.matrix(y ~.,ridge_train)
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
# get a range of reasonable lambda values
l_range <- range(svals)^2
# get the predicted values using ridge regression
# (function reference to class notes)
predict.ridge_reg <- function(object, ...){
newdata <- list(...)[[1]]
m <- model.matrix(object$form,newdata)
m %*% object$coefficients
}
# set lambda values
l_lambda <- seq(0, 650, by=0.1)
# calculate MSE (reference to class notes)
mse = rep(0, length(l_lambda))
for (i in 1:length(l_lambda)){
fit <- ridge_reg(y~.,l_lambda[i],ridge_train)
error <- ridge_test$y - predict(fit,ridge_test)
mse[i] <- mean(error^2)
}
# plot MSE against log(lambda)
plot(mse~log(l_lambda), xlab = "log(lambda)", ylab = "out-of-sample MSE", main = "Out-of-sample mean square error vs. log(lambda)", type = "l")
# find the lambda value that minimizes the out-of-sample MSE
l_lambda[which(mse == min(mse))]
check()
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
check()
data("ridge_train")
data("ridge_test")
ridge_train
